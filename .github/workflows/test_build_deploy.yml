name: Test, build, deploy
on: [ push, pull_request ]
jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.18.x
      - name: Checkout code
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4
      - name: Test code
        run: make unit-test
      - uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage_unit.txt
          flags: unittests
  postgres-minio-integration-tests:
    env:
      DISTRYBUTE_TEST_DB: ${{ format('distrybute_{0}', github.run_id) }}
      MINIO_TEST_BUCKET_NAME: ${{ format('distrybute-{0}', github.run_id) }}
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ${{ env.DISTRYBUTE_TEST_DB }}
        ports:
          - 5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      minio:
        image: fclairamb/minio-github-actions
        ports:
          - 9000/tcp
        options: >-
          --health-cmd "curl http://localhost:9000/minio/health/live"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.18.x
      - name: Checkout code
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4
      - name: Test code
        run: make postgres-minio-integration-test
        env:
          TEST_POSTGRES_HOST: localhost
          TEST_POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}
          TEST_POSTGRES_DB: ${{ env.DISTRYBUTE_TEST_DB }}
          TEST_MINIO_HOST: localhost
          TEST_MINIO_PORT: ${{ job.services.minio.ports[9000] }}
          TEST_MINIO_BUCKET_NAME: ${{ env.MINIO_TEST_BUCKET_NAME }}
      - uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage_integration.txt
          flags: integrationtests
  docker-build:
    needs: [ postgres-minio-integration-tests, unit-tests ]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Build docker image
        run: |
          make docker-build
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: mmichaelb
          password: ${{ secrets.DOCKERHUB_SECRET }}
        if: ${{ github.ref_type == 'tag' }}
      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
        if: ${{ github.ref_type == 'tag' }}
      - name: Build and push cross-platform images
        run: |
          make docker-cross-platform-buildx-push
        if: ${{ github.ref_type == 'tag' }}
  deploy:
    needs: [ docker-build ]
    if: ${{ github.ref_type == 'tag' }}
    runs-on: ubuntu-latest
    permissions:
      deployments: write
    steps:
      - uses: avakar/create-deployment@v1
        with:
          ref: ${{ github.ref }}
          auto_merge: false
          required_contexts: ""
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

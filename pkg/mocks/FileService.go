// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	io "io"

	distrybute "github.com/mmichaelb/distrybute/pkg"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// FileService is an autogenerated mock type for the FileService type
type FileService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: deleteReference
func (_m *FileService) Delete(deleteReference string) error {
	ret := _m.Called(deleteReference)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(deleteReference)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Request provides a mock function with given fields: callReference
func (_m *FileService) Request(callReference string) (*distrybute.FileEntry, error) {
	ret := _m.Called(callReference)

	var r0 *distrybute.FileEntry
	if rf, ok := ret.Get(0).(func(string) *distrybute.FileEntry); ok {
		r0 = rf(callReference)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*distrybute.FileEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(callReference)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: filename, contentType, size, author, reader
func (_m *FileService) Store(filename string, contentType string, size int64, author uuid.UUID, reader io.Reader) (*distrybute.FileEntry, error) {
	ret := _m.Called(filename, contentType, size, author, reader)

	var r0 *distrybute.FileEntry
	if rf, ok := ret.Get(0).(func(string, string, int64, uuid.UUID, io.Reader) *distrybute.FileEntry); ok {
		r0 = rf(filename, contentType, size, author, reader)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*distrybute.FileEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int64, uuid.UUID, io.Reader) error); ok {
		r1 = rf(filename, contentType, size, author, reader)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

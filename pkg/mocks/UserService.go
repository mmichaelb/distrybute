// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	distrybute "github.com/mmichaelb/distrybute/pkg"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// CheckPassword provides a mock function with given fields: username, password
func (_m *UserService) CheckPassword(username string, password []byte) (bool, *distrybute.User, error) {
	ret := _m.Called(username, password)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, []byte) bool); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *distrybute.User
	if rf, ok := ret.Get(1).(func(string, []byte) *distrybute.User); ok {
		r1 = rf(username, password)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*distrybute.User)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, []byte) error); ok {
		r2 = rf(username, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateNewUser provides a mock function with given fields: username, password
func (_m *UserService) CreateNewUser(username string, password []byte) (*distrybute.User, error) {
	ret := _m.Called(username, password)

	var r0 *distrybute.User
	if rf, ok := ret.Get(0).(func(string, []byte) *distrybute.User); ok {
		r0 = rf(username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*distrybute.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []byte) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: id
func (_m *UserService) DeleteUser(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByAuthorizationToken provides a mock function with given fields: token
func (_m *UserService) GetUserByAuthorizationToken(token string) (bool, *distrybute.User, error) {
	ret := _m.Called(token)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *distrybute.User
	if rf, ok := ret.Get(1).(func(string) *distrybute.User); ok {
		r1 = rf(token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*distrybute.User)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(token)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserByUsername provides a mock function with given fields: username
func (_m *UserService) GetUserByUsername(username string) (*distrybute.User, error) {
	ret := _m.Called(username)

	var r0 *distrybute.User
	if rf, ok := ret.Get(0).(func(string) *distrybute.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*distrybute.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields:
func (_m *UserService) ListUsers() ([]*distrybute.User, error) {
	ret := _m.Called()

	var r0 []*distrybute.User
	if rf, ok := ret.Get(0).(func() []*distrybute.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*distrybute.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshAuthorizationToken provides a mock function with given fields: id
func (_m *UserService) RefreshAuthorizationToken(id uuid.UUID) (string, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(uuid.UUID) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResolveAuthorizationToken provides a mock function with given fields: id
func (_m *UserService) ResolveAuthorizationToken(id uuid.UUID) (string, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(uuid.UUID) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePassword provides a mock function with given fields: id, password
func (_m *UserService) UpdatePassword(id uuid.UUID, password []byte) error {
	ret := _m.Called(id, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, []byte) error); ok {
		r0 = rf(id, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUsername provides a mock function with given fields: id, newUsername
func (_m *UserService) UpdateUsername(id uuid.UUID, newUsername string) error {
	ret := _m.Called(id, newUsername)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) error); ok {
		r0 = rf(id, newUsername)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
